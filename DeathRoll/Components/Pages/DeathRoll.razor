@page "/"
@rendermode InteractiveServer

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Death Roll</PageTitle>

<h1>Death Roll</h1>

@if (_players.Count < 10)
{
    <button class="btn btn-secondary" @onclick="AddPlayer">Add player</button>
}

<br/>
<br/>

@foreach(var (_, index) in _players.Select((player, index) => (player, index)))
{
    <input @bind="_players[index]" class="form-control player-name" placeholder="Player @(index+1) name"/>
    @if (_players.Count > 2)
    {
        <Button @onclick="() => RemovePlayer(index)" class="btn btn-danger">
            <Icon Name="IconName.Trash"/>
        </Button>
    }
    <br/>
}

<br/>
<br/>

@if (_players.Count >= 2 && AllPlayersHaveNames())
{
    <p role="status">Current player: @_players[_currentPlayer]</p>
    <p role="status">@_players[_previousPlayer] rolled: @_currentRoll</p>
}

@if (_winner == null)
{
    <button class="btn btn-primary" @onclick="Roll">Roll @_limits.min - @_limits.max</button>
}
else
{
    <button class="btn btn-primary" @onclick="Reset">Reset</button>
}

<br/>
<br/>

@if (_winner != null)
{
    <h1>Winner: @_winner</h1>
}

@code {
    private (int min, int max) _limits = (1, 100);
    private readonly List<string?> _players = [];
    private int _currentPlayer;
    private int _previousPlayer;
    private int? _currentRoll;
    private string? _winner;

    [Inject] protected ToastService ToastService { get; set; }

    protected override void OnInitialized()
    {
        _players.Add("");
        _players.Add("");
    }
        
    private void Roll()
    {
        if (!VerifyPlayerNames())
        {
            return;
        }
        
        _currentRoll = new Random().Next(_limits.min, _limits.max);
        _previousPlayer = _currentPlayer;

        if (_currentRoll == 1)
        {
            if (_players.Count > 2)
            {
                _players.RemoveAt(_currentPlayer);
                _limits = (1, 100);
            }
            else
            {
                _winner = _players[(_currentPlayer + 1) % _players.Count];
            }
        }
        else
        {
            _limits.max = _currentRoll ?? 0;
        }

        if (_winner == null)
        {
            _currentPlayer = (_currentPlayer + 1) % _players.Count;
        }
    }
    
    private void AddPlayer()
    {
        _players.Add("");
    }
    
    private void RemovePlayer(int index)
    {
        try
        {
            _players.RemoveAt(index);
        }
        catch (Exception _)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "Error: Need at least two players"));
            throw;
        }
    }
    
    private void Reset()
    {
        _players.Clear();
        _players.Add("");
        _players.Add("");
        _currentPlayer = 0;
        _currentRoll = null;
        _winner = null;
        _limits = (1, 100);
    }

    private bool VerifyPlayerNames()
    {
        if (AllPlayersHaveNames()) return true;
        
        ToastService.Notify(new ToastMessage(ToastType.Danger, "Error: All players need a name"));
        return false;
    }

    private bool AllPlayersHaveNames()
    {
        return !_players.Any(string.IsNullOrWhiteSpace);
    }
}